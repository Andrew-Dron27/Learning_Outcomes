Caleb Edwards
U0829971

Sources:
https://docs.microsoft.com/en-us/aspnet/core/data/ef-rp/intro?view=aspnetcore-2.2&tabs=visual-studio
https://gooroo.io/GoorooTHINK/Article/17333/Custom-user-roles-and-rolebased-authorization-in-ASPNET-core/28380#.WbgShcgjGUl
https://stackoverflow.com/questions/42471866/how-to-create-roles-in-asp-net-core-and-assign-them-to-users
Will use
https://stackoverflow.com/questions/23504528/dynamically-remove-items-from-list-javascript


Github Link : https://github.com/calebedwards21/CS4540_LearningOutcomes.git

PS5----------------------------------------------------------------------------------------------------------------------------------------------------------------------PS5
Andrew Dron is partner on assignment

Advanced Features Completed : 

COMPLETED:
Date stamp the note and show this information next to the note.

Date stamp the note.

The note will be displayed in a red color if last edited by a Department Chair otherwise, black.  
This will require a Boolean field in the Model 

Instead of a plain textarea, used a WYSIWYG editor. We used TinyMCE.

IN PROGRESS:
Allow a chair to approve the note and mark that it was seen.  Note: The approve button above should not be shown to the instructor, 
but instead a label with "Approved" or "Pending" should be shown. The approve button should only be shown to the chair.
(Note: the Submit button is not available to the chair).



Notes for me -------
Jquery - $(function{})  waits til the web page loads before executing func
		- $(func)

website reads from top to bottom
JSON replaces XML

$.ajax{object param} = object param = {}
can debug by clicking network panel when returns 500 or some other error
.done, .fail, .always for ajax
always is the finally statement - so always happens no matter what

PS4 ----------------------------------------------------------------------------------------------------------------------------------------------------------------------PS4
Notes
For the email verification, I had to put my umail and password into the credentials for the smtp server to accept it and send the email on. I took this out of my submission, 
but I did this from home using the VPN of the U. So I am not sure if these things need to be added while on the U's network or if it will allow access when being graded.
I did not put my info in though, so the email verification will not work unless added. 

Observations on Authentication and Authorization
I found that it was pretty easy to implement authentication when following the tutorials, since .NET Core does this all for you. You do have to add a migration though to make
sure that you link your database with this new model. I had problems when seeding these tables though, because in the startup of the identity I didn't include the RoleManager
and this lead to a long time of debugging. I found it very useful that these tables are implemented for me though. This saves a lot of time instead of creating our own 
Authentication tables. I also found it simple for now to implement Authorization. This was all done in the seed class for me. I created the roles and added them to my seeded users.
I am not totally sure how I am going to add roles to newly created users, but that is probably for next assignment. This was very useful when deciding who had access though. I 
did have a problem with not knowing if I needed to create new views and methods in my controller, since each of the test links had to show that there was Authorization. This is 
what I ended up doing to spread the authorization from different users and their roles. 

Above and Beyond paragraph
I did not have a lot of extra stuff in this assignment. I struggled to meet the basic requirements. I am working on having different tabs in the toolbar show depending
on what user is signed in. I decided to show the individual role in the role page because that seemed like the most logical way of showing what role they had. I would like
to have a key showing what roles are available though. 

Improvements paragraph 
I restarted my project aruond five times because I couldn't figure out how to manage my database. This lead to me restructuring my tables and creating an Instructor table. This
way I was able to link my courses to my instructors. This also allowed me to restructure my version control. I did not know that VS created a .gitignore for you and put all the 
files it generated into there. This also saved me a lot of time with version control. 


PS3 -------------------------------------------------------------------------------------------------------------------------------------------PS3
Improvements:
For improvements I changed the layout to include more details for the department chair. It now has year, semester, etc. There is a progress bar
that displays the overall performance of the professor. The course view has a grade for each of the of example assignment/exams that were submitted
with it. There is an add/delete/edit still associated with each of the tables. These should obviously be turned off depending on the view you are in. 
I have a sign in home page, but since the requirements were only to display the dc view. The tables are now linked to each other as well. When you click
on a certain course, the LO's for that course will be displayed along with the course name. A database has been added to keep track of different 
values, including name, description, year, etc. These are initially populated with values that I gave it. 


Razor:
I created the Razor page when I was building the MVC from the tutorial. Then I created CRUD pages for the Model. They use the Razor syntax and create
a view to send back to the controller. I had troubles when comparing the C# code vs the Razor code. I'm not exactly sure how to add the C# code in the 
same way that the Razor pages were created. 

UI/UX Description Choices:
There is tables in these html files because it seemed like the most understandable UI for the user in this situation. 
The overview page has a list of professors and the professors and how much they have completed. There is a link on the professor
that will take the chair to the courses of that professor and then to the learning outcomes. This seemed like the most fluent way for 
the chair to keep track of all professors. The professor gets a list of courses with completion rate which has a link to his course page
that they will eventually be able to add and delete examples and descriptions. Each html page has a navigation bar with atleast an About 
directory that will take them to the assignment to see what needs to happen on the page. The overview shows a completion rate that is color
coded to the % of completion that each professor has done. The course page has a nav link back to the overview page but this will change 
when more pages are added and user definition is more clear. I made my two css pages fit into one css page now that I know I can change
the body to have a unique ID or class. 

Bootstrap Components:
I used a navbar that bootstrap gave with some dropdowns for the users of the webpage and the courses available.
I used progress bars in the overviews section so they could see more clearly how much work the professor still needed
to accomplish. I added a search bar so the user can eventually search for what they need.